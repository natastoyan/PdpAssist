@page "/skills"
@using PdpAssist.Client.Components;
@using PdpAssist.Shared;
@inject HttpClient Http;
<PageTitle>SkillPlant</PageTitle>
<div class="row">
	<div class="col-lg-8">
		<div class="card">
			<div class="card-header">
				My skills
			</div>
			<div class="card-body">
				<RadzenDataGrid AllowGrouping="false" Data="@skills" TItem="Skill" Render="@OnRender">
					<Columns>
						<RadzenDataGridColumn TItem="Skill" Property="Name" Title="Name" Frozen="true"/>
						<RadzenDataGridColumn TItem="Skill" Property="Priority" Title="Priority">
							<Template Context="skill">
								<span class="dot @skill.Priority.ToString().ToLower()"/>
							</Template>
						</RadzenDataGridColumn>
						<RadzenDataGridColumn TItem="Skill" Property="CurrentScore" Title="Current Score"/>
						<RadzenDataGridColumn TItem="Skill" Property="DesirebleScore" Title="Desireble Score"/>
						<RadzenDataGridColumn TItem="Skill" Property="TimeToImprove" Title="Time To Improve"/>
						<RadzenDataGridColumn TItem="Skill" Property="" Title="">
							<Template Context="skill">
								<button type="button" class="btn btn-outline-danger btn-sm" @onclick="() =>
										OpenDeleteDialog(skill)">
											Delete
										</button>
							</Template>
						</RadzenDataGridColumn>
					</Columns>
				</RadzenDataGrid>
			</div>
		</div>
	</div>
	<div class="col-lg-4">
		<SkillForm OnSubmitCallback="@Refresh"></SkillForm>
	</div>
</div>
<div>&nbsp;</div>
@if (DeleteDialogOpen)
{
	<ModalDialog Title="Are you sure?"
			 Text="Do you want to delete this entry?"
			 OnClose="@OnDeleteDialogClose"
			 DialogType="ModalDialog.ModalDialogType.DeleteCancel">
	</ModalDialog>
}
@code {
	Skill[] skills;
	private Skill _skillToDelete;
	public bool DeleteDialogOpen { get; set; }

	private async Task OnDeleteDialogClose(bool accepted)
	{
		if (accepted)
		{
			await Http.DeleteAsync($"api/Skills/{_skillToDelete.Id}");
			await LoadData();
			_skillToDelete = null;
		}

		DeleteDialogOpen = false;
		StateHasChanged();
	}

	private void OpenDeleteDialog(Skill skill)
	{
		DeleteDialogOpen = true;
		_skillToDelete = skill;
		StateHasChanged();
	}

	void OnRender(DataGridRenderEventArgs<Skill> args)
	{
		//if(args.FirstRender)
		//{
		//	args.Grid.Groups.Add(new GroupDescriptor(){ Property = "Group" });
  //          StateHasChanged();
  //      }
    }
	protected async override Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		skills = await Http.GetFromJsonAsync<Skill[]>("api/Skills");
		StateHasChanged();
	}

	public async void Refresh()
	{
		await LoadData();
	}
}
