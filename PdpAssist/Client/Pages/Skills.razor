@page "/skills"
@using PdpAssist.Client.Components;
@using PdpAssist.Shared;
@inject HttpClient Http;
<PageTitle>SkillPlant</PageTitle>
<div class="row">
	<div class="col-lg-8">
		<div class="card">
			<div class="card-header">
				My skills
			</div>
			<div class="card-body">
				<table class="table">
					<thead>
						<tr>
							<th>Name</th>
							<th>Current Scrore</th>
							<th>Desireble Score</th>
							<th>Time to grow</th>
							<th>&nbsp;</th>
						</tr>
					</thead>
					<tbody>
						@if (skills == null)
						{
							<tr><td><em>Loading...</em></td></tr>
						}
						else
							@foreach (var skill in skills)
							{
								<tr>
									<td>@skill.Name</td>
									<td>@skill.CurrentScore</td>
									<td>@skill.DesirebleScore</td>
									<td>@skill.TimeToImprove hours</td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => 
										OpenDeleteDialog(skill)">Delete</button></td>
								</tr>
							}
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="col-lg-4">
		<SkillForm OnSubmitCallback="@Refresh"></SkillForm>
	</div>
</div>
<div>&nbsp;</div>
@if (DeleteDialogOpen)
{
    <ModalDialog Title="Are you sure?"
                 Text="Do you want to delete this entry?"
                 OnClose="@OnDeleteDialogClose"
                 DialogType="ModalDialog.ModalDialogType.DeleteCancel">
    </ModalDialog>
}
@code {
	Skill[] skills;
	private Skill _skillToDelete;
    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await Http.DeleteAsync($"api/Skills/{_skillToDelete.Id}");
            await LoadData();
            _skillToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(Skill skill)
    {
        DeleteDialogOpen = true;
        _skillToDelete = skill;
        StateHasChanged();
    }
	protected async override Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		skills = await Http.GetFromJsonAsync<Skill[]>("api/Skills");
		StateHasChanged();
	}

	public async void Refresh()
	{
		await LoadData();
	}
}
