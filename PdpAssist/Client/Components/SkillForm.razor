@using PdpAssist.Web.Components
@using PdpAssist.Shared;
@inject HttpClient Http;
<div class="card">
	<div class="card-header">
		Add a skill
	</div>
	<div class="card-body">
		<EditForm Model="@skill" OnValidSubmit="@HandleValidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="form-group">
				<label for="nameInput">Name</label>
				<InputText class="form-control" id="nameInput" @bind-Value="skill.Name"></InputText>
			</div>
			<div class="form-group">
				<label for="currentScoreInput">Current Score</label>
				<InputNumber class="form-control" id="currentScoreInput" @bind-Value="skill.CurrentScore"></InputNumber>
			</div>
			<div class="form-group">
				<label for="desirebleScoreInput">Desirable Score</label>
				<InputNumber class="form-control" id="desirebleScoreInput" @bind-Value="skill.DesirebleScore"></InputNumber>
			</div>
			<div class="form-group">
				<label for="timeToImproveInput">Time to grow</label>
				<InputNumber class="form-control" id="desirebleScoreInput" @bind-Value="skill.TimeToImprove"></InputNumber>
			</div>
			<div class="form-group">
				<label for="priorityInput">Category</label>
				<RadzenDropDown class="form-control" id="priorityInput" Data="@(Enum.GetValues(typeof(SkillPriority)).Cast<Enum>())" @bind-Value="skill.Priority"></RadzenDropDown>
			</div>
			<div class="form-group">
				<label for="groupInput">Skill Group</label>
				<RadzenDropDown class="form-control" id="groupInput" Data="@skillGroups" @bind-Value="skill.Group"></RadzenDropDown>
			</div>
			<div>
				<button class="btn btn-outline-primary" type="submit">Submit</button>
			</div>
		</EditForm>
	</div>
</div>

@code {
	private SkillModel skill = new SkillModel();
	private IEnumerable<SkillGroup> skillGroups = new List<SkillGroup>();

	[Parameter]
	public EventCallback OnSubmitCallback { get; set; }

	public async Task HandleValidSubmit()
	{
		await Http.PostAsJsonAsync<SkillModel>("api/Skills", skill);
		await OnSubmitCallback.InvokeAsync();
	}

	protected async override Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		skillGroups = await Http.GetFromJsonAsync<SkillGroup[]>("api/SkillGroups");
		StateHasChanged();
	}
}
